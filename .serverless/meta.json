{
  "/media/Feidhmchl√°ir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "opt": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "aindriu",
            "app": "aws-api-gateway-crud-rest-api",
            "service": "aws-api-gateway-crud-rest-api",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "eu-west-1",
              "stage": "dev",
              "profile": "serverless-deployer",
              "deploymentBucket": "amge-deployment-bucket",
              "environment": {
                "ITEMS_TABLE": {
                  "Ref": "ItemsTable"
                }
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ItemsTable",
                          "Arn"
                        ]
                      }
                    }
                  ]
                }
              },
              "versionFunctions": true,
              "deploymentBucketObject": {
                "name": "amge-deployment-bucket"
              },
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "CreateLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-create"
                    }
                  },
                  "ReadLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-read"
                    }
                  },
                  "UpdateLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-update"
                    }
                  },
                  "DeleteLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-delete"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "aws-api-gateway-crud-rest-api",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-api-gateway-crud-rest-api-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-api-gateway-crud-rest-api-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem"
                                ],
                                "Resource": {
                                  "Fn::GetAtt": [
                                    "ItemsTable",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "aws-api-gateway-crud-rest-api",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "amge-deployment-bucket",
                        "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                      },
                      "Handler": "src/handlers/create.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "aws-api-gateway-crud-rest-api-dev-create",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "ITEMS_TABLE": {
                            "Ref": "ItemsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateLogGroup"
                    ]
                  },
                  "ReadLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "amge-deployment-bucket",
                        "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                      },
                      "Handler": "src/handlers/read.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "aws-api-gateway-crud-rest-api-dev-read",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "ITEMS_TABLE": {
                            "Ref": "ItemsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ReadLogGroup"
                    ]
                  },
                  "UpdateLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "amge-deployment-bucket",
                        "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                      },
                      "Handler": "src/handlers/update.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "aws-api-gateway-crud-rest-api-dev-update",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "ITEMS_TABLE": {
                            "Ref": "ItemsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateLogGroup"
                    ]
                  },
                  "DeleteLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "amge-deployment-bucket",
                        "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                      },
                      "Handler": "src/handlers/delete.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "aws-api-gateway-crud-rest-api-dev-delete",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "ITEMS_TABLE": {
                            "Ref": "ItemsTable"
                          }
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteLogGroup"
                    ]
                  },
                  "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateLambdaFunction"
                      },
                      "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
                    }
                  },
                  "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ReadLambdaFunction"
                      },
                      "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
                    }
                  },
                  "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateLambdaFunction"
                      },
                      "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
                    }
                  },
                  "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteLambdaFunction"
                      },
                      "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-aws-api-gateway-crud-rest-api",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceItems": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "items",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceItemsIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceItems"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodItemsPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceItems"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodItemsIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceItemsIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ReadLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ReadLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodItemsIdVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceItemsIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodItemsIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceItemsIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1731270343199": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodItemsPost",
                      "ApiGatewayMethodItemsIdVarGet",
                      "ApiGatewayMethodItemsIdVarPut",
                      "ApiGatewayMethodItemsIdVarDelete"
                    ]
                  },
                  "CreateLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ReadLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ReadLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ItemsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "ItemsTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "id",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "id",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "amge-deployment-bucket",
                    "Export": {
                      "Name": "sls-aws-api-gateway-crud-rest-api-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ"
                    },
                    "Export": {
                      "Name": "sls-aws-api-gateway-crud-rest-api-dev-CreateLambdaFunctionQualifiedArn"
                    }
                  },
                  "ReadLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE"
                    },
                    "Export": {
                      "Name": "sls-aws-api-gateway-crud-rest-api-dev-ReadLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE"
                    },
                    "Export": {
                      "Name": "sls-aws-api-gateway-crud-rest-api-dev-UpdateLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU"
                    },
                    "Export": {
                      "Name": "sls-aws-api-gateway-crud-rest-api-dev-DeleteLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-aws-api-gateway-crud-rest-api-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "create": {
                "handler": "src/handlers/create.handler",
                "environment": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                },
                "events": [
                  {
                    "http": {
                      "path": "items",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "aws-api-gateway-crud-rest-api-dev-create",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ"
              },
              "read": {
                "handler": "src/handlers/read.handler",
                "environment": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                },
                "events": [
                  {
                    "http": {
                      "path": "items/{id}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "aws-api-gateway-crud-rest-api-dev-read",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE"
              },
              "update": {
                "handler": "src/handlers/update.handler",
                "environment": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                },
                "events": [
                  {
                    "http": {
                      "path": "items/{id}",
                      "method": "put",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "aws-api-gateway-crud-rest-api-dev-update",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE"
              },
              "delete": {
                "handler": "src/handlers/delete.handler",
                "environment": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                },
                "events": [
                  {
                    "http": {
                      "path": "items/{id}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "aws-api-gateway-crud-rest-api-dev-delete",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU"
              }
            },
            "resources": {
              "Resources": {
                "ItemsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "ItemsTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "id",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                }
              },
              "Outputs": {}
            },
            "package": {
              "exclude": [
                "tests/**",
                ".git/**"
              ],
              "artifactsS3KeyDirname": "serverless/aws-api-gateway-crud-rest-api/dev/code-artifacts",
              "deploymentBucket": "amge-deployment-bucket",
              "artifact": "/media/Feidhmchl√°ir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api/.serverless/aws-api-gateway-crud-rest-api.zip",
              "artifactDirectoryName": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z"
            },
            "custom": {
              "esbuild": {
                "bundle": true,
                "minify": true,
                "exclude": [
                  "aws-sdk"
                ],
                "target": "node18",
                "define": {
                  "require.resolve": "undefined"
                }
              }
            }
          },
          "configFileDirPath": "/media/Feidhmchl√°ir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api",
          "config": {
            "type": "opt"
          },
          "options": {},
          "logger": {
            "namespace": "s:core:resolver:opt",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "/media/Feidhmchl√°ir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "aindriu",
      "app": "aws-api-gateway-crud-rest-api",
      "service": "aws-api-gateway-crud-rest-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "eu-west-1",
        "stage": "dev",
        "profile": "serverless-deployer",
        "deploymentBucket": "amge-deployment-bucket",
        "environment": {
          "ITEMS_TABLE": {
            "Ref": "ItemsTable"
          }
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": {
                  "Fn::GetAtt": [
                    "ItemsTable",
                    "Arn"
                  ]
                }
              }
            ]
          }
        },
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "amge-deployment-bucket"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-create"
              }
            },
            "ReadLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-read"
              }
            },
            "UpdateLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-update"
              }
            },
            "DeleteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-delete"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "aws-api-gateway-crud-rest-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-api-gateway-crud-rest-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-api-gateway-crud-rest-api-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "ItemsTable",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "aws-api-gateway-crud-rest-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "amge-deployment-bucket",
                  "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                },
                "Handler": "src/handlers/create.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "aws-api-gateway-crud-rest-api-dev-create",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ITEMS_TABLE": {
                      "Ref": "ItemsTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateLogGroup"
              ]
            },
            "ReadLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "amge-deployment-bucket",
                  "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                },
                "Handler": "src/handlers/read.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "aws-api-gateway-crud-rest-api-dev-read",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ITEMS_TABLE": {
                      "Ref": "ItemsTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ReadLogGroup"
              ]
            },
            "UpdateLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "amge-deployment-bucket",
                  "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                },
                "Handler": "src/handlers/update.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "aws-api-gateway-crud-rest-api-dev-update",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ITEMS_TABLE": {
                      "Ref": "ItemsTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateLogGroup"
              ]
            },
            "DeleteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "amge-deployment-bucket",
                  "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
                },
                "Handler": "src/handlers/delete.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "aws-api-gateway-crud-rest-api-dev-delete",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ITEMS_TABLE": {
                      "Ref": "ItemsTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteLogGroup"
              ]
            },
            "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateLambdaFunction"
                },
                "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
              }
            },
            "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ReadLambdaFunction"
                },
                "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
              }
            },
            "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateLambdaFunction"
                },
                "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
              }
            },
            "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteLambdaFunction"
                },
                "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-aws-api-gateway-crud-rest-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceItems": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "items",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceItemsIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceItems"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodItemsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceItems"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodItemsIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceItemsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ReadLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ReadLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodItemsIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceItemsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodItemsIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceItemsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1731270343199": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodItemsPost",
                "ApiGatewayMethodItemsIdVarGet",
                "ApiGatewayMethodItemsIdVarPut",
                "ApiGatewayMethodItemsIdVarDelete"
              ]
            },
            "CreateLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ReadLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ReadLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ItemsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "ItemsTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "amge-deployment-bucket",
              "Export": {
                "Name": "sls-aws-api-gateway-crud-rest-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ"
              },
              "Export": {
                "Name": "sls-aws-api-gateway-crud-rest-api-dev-CreateLambdaFunctionQualifiedArn"
              }
            },
            "ReadLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE"
              },
              "Export": {
                "Name": "sls-aws-api-gateway-crud-rest-api-dev-ReadLambdaFunctionQualifiedArn"
              }
            },
            "UpdateLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE"
              },
              "Export": {
                "Name": "sls-aws-api-gateway-crud-rest-api-dev-UpdateLambdaFunctionQualifiedArn"
              }
            },
            "DeleteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU"
              },
              "Export": {
                "Name": "sls-aws-api-gateway-crud-rest-api-dev-DeleteLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-aws-api-gateway-crud-rest-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "create": {
          "handler": "src/handlers/create.handler",
          "environment": {
            "ITEMS_TABLE": {
              "Ref": "ItemsTable"
            }
          },
          "events": [
            {
              "http": {
                "path": "items",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "aws-api-gateway-crud-rest-api-dev-create",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ"
        },
        "read": {
          "handler": "src/handlers/read.handler",
          "environment": {
            "ITEMS_TABLE": {
              "Ref": "ItemsTable"
            }
          },
          "events": [
            {
              "http": {
                "path": "items/{id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "aws-api-gateway-crud-rest-api-dev-read",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE"
        },
        "update": {
          "handler": "src/handlers/update.handler",
          "environment": {
            "ITEMS_TABLE": {
              "Ref": "ItemsTable"
            }
          },
          "events": [
            {
              "http": {
                "path": "items/{id}",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "aws-api-gateway-crud-rest-api-dev-update",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE"
        },
        "delete": {
          "handler": "src/handlers/delete.handler",
          "environment": {
            "ITEMS_TABLE": {
              "Ref": "ItemsTable"
            }
          },
          "events": [
            {
              "http": {
                "path": "items/{id}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "aws-api-gateway-crud-rest-api-dev-delete",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU"
        }
      },
      "resources": {
        "Resources": {
          "ItemsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ItemsTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      },
      "package": {
        "exclude": [
          "tests/**",
          ".git/**"
        ],
        "artifactsS3KeyDirname": "serverless/aws-api-gateway-crud-rest-api/dev/code-artifacts",
        "deploymentBucket": "amge-deployment-bucket",
        "artifact": "/media/Feidhmchl√°ir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api/.serverless/aws-api-gateway-crud-rest-api.zip",
        "artifactDirectoryName": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z"
      },
      "custom": {
        "esbuild": {
          "bundle": true,
          "minify": true,
          "exclude": [
            "aws-sdk"
          ],
          "target": "node18",
          "define": {
            "require.resolve": "undefined"
          }
        }
      }
    },
    "serviceRawFile": "org: aindriu\napp: aws-api-gateway-crud-rest-api\nservice: aws-api-gateway-crud-rest-api\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  region: eu-west-1  \n  stage: ${opt:stage, 'dev'}\n  profile: serverless-deployer\n  deploymentBucket:\n    name: amge-deployment-bucket\n  environment:\n    ITEMS_TABLE: !Ref ItemsTable  # Correct way to reference the table name\n  iam:\n    role:\n      statements:\n        - Effect: \"Allow\"\n          Action:\n            - \"dynamodb:PutItem\"\n            - \"dynamodb:GetItem\"\n            - \"dynamodb:UpdateItem\"\n            - \"dynamodb:DeleteItem\"\n          Resource: !GetAtt ItemsTable.Arn  # Correct way to reference the table ARN\n\nfunctions:\n  create:\n    handler: src/handlers/create.handler\n    environment:\n      ITEMS_TABLE: !Ref ItemsTable  # Correct way to reference the table name\n    events:\n      - http:\n          path: items\n          method: post\n\n  read:\n    handler: src/handlers/read.handler\n    environment:\n      ITEMS_TABLE: !Ref ItemsTable  # Correct way to reference the table name\n    events:\n      - http:\n          path: items/{id}\n          method: get\n\n  update:\n    handler: src/handlers/update.handler\n    environment:\n      ITEMS_TABLE: !Ref ItemsTable  # Correct way to reference the table name\n    events:\n      - http:\n          path: items/{id}\n          method: put\n\n  delete:\n    handler: src/handlers/delete.handler\n    environment:\n      ITEMS_TABLE: !Ref ItemsTable  # Correct way to reference the table name\n    events:\n      - http:\n          path: items/{id}\n          method: delete\n\nresources:\n  Resources:\n    ItemsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ItemsTable  # You can set a fixed table name, or remove this if CloudFormation manages it automatically\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\npackage:\n  exclude:\n    - tests/**           \n    - .git/**           \n\ncustom:\n  esbuild:\n    bundle: true           \n    minify: true          \n    exclude: ['aws-sdk'] \n    target: \"node18\"    \n    define:\n      \"require.resolve\": undefined\n\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "5205ee5d9cfbf9a25d28566ff85f014f",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "7e1b92de-7a92-4df6-bb12-3e5ca9e5edcf",
    "orgName": "aindriu",
    "userId": "NRsCKCkSlwvpCfJD9n",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "ZnmZlcDfnYsQ3Ftt78",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "organs",
    "subscription": null,
    "userEmail": "aindriu80@yahoo.com",
    "serviceProviderAwsRegion": "eu-west-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "869935109465",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "aws-api-gateway-crud-rest-api-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-west-1:869935109465:stack/aws-api-gateway-crud-rest-api-dev/13917260-9c5f-11ef-8cb3-068b26aa6077",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-west-1:869935109465:stack/aws-api-gateway-crud-rest-api-dev/13917260-9c5f-11ef-8cb3-068b26aa6077",
    "serviceProviderAwsCfStackCreated": "2024-11-06T16:49:23.920Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-10T20:26:07.912Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeleteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-1:869935109465:function:aws-api-gateway-crud-rest-api-dev-delete:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-api-gateway-crud-rest-api-dev-DeleteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-1:869935109465:function:aws-api-gateway-crud-rest-api-dev-create:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-api-gateway-crud-rest-api-dev-CreateLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-1:869935109465:function:aws-api-gateway-crud-rest-api-dev-update:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-api-gateway-crud-rest-api-dev-UpdateLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://lr9xwqnfek.execute-api.eu-west-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-aws-api-gateway-crud-rest-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "amge-deployment-bucket",
        "ExportName": "sls-aws-api-gateway-crud-rest-api-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "ReadLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-1:869935109465:function:aws-api-gateway-crud-rest-api-dev-read:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-api-gateway-crud-rest-api-dev-ReadLambdaFunctionQualifiedArn"
      }
    ]
  }
}