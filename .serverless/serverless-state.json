{
  "service": {
    "service": "aws-api-gateway-crud-rest-api",
    "serviceObject": {
      "name": "aws-api-gateway-crud-rest-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "eu-west-1",
      "stage": "dev",
      "profile": "serverless-deployer",
      "deploymentBucket": "amge-deployment-bucket",
      "environment": {
        "ITEMS_TABLE": {
          "Ref": "ItemsTable"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ItemsTable",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "amge-deployment-bucket"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-create"
            }
          },
          "ReadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-read"
            }
          },
          "UpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-update"
            }
          },
          "DeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-api-gateway-crud-rest-api-dev-delete"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-api-gateway-crud-rest-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-api-gateway-crud-rest-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-api-gateway-crud-rest-api-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-api-gateway-crud-rest-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "amge-deployment-bucket",
                "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
              },
              "Handler": "src/handlers/create.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-api-gateway-crud-rest-api-dev-create",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateLogGroup"
            ]
          },
          "ReadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "amge-deployment-bucket",
                "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
              },
              "Handler": "src/handlers/read.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-api-gateway-crud-rest-api-dev-read",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadLogGroup"
            ]
          },
          "UpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "amge-deployment-bucket",
                "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
              },
              "Handler": "src/handlers/update.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-api-gateway-crud-rest-api-dev-update",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateLogGroup"
            ]
          },
          "DeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "amge-deployment-bucket",
                "S3Key": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z/aws-api-gateway-crud-rest-api.zip"
              },
              "Handler": "src/handlers/delete.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-api-gateway-crud-rest-api-dev-delete",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ITEMS_TABLE": {
                    "Ref": "ItemsTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteLogGroup"
            ]
          },
          "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
            }
          },
          "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadLambdaFunction"
              },
              "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
            }
          },
          "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
            }
          },
          "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteLambdaFunction"
              },
              "CodeSha256": "H8Eh839UTaGsXC1sq3jrDWA5YlKc15qqyPCfNJriV5M="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-aws-api-gateway-crud-rest-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceItems": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "items",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceItemsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceItems"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodItemsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceItems"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodItemsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceItemsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReadLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ReadLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodItemsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceItemsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodItemsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceItemsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1731270343199": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodItemsPost",
              "ApiGatewayMethodItemsIdVarGet",
              "ApiGatewayMethodItemsIdVarPut",
              "ApiGatewayMethodItemsIdVarDelete"
            ]
          },
          "CreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReadLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ItemsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ItemsTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "amge-deployment-bucket",
            "Export": {
              "Name": "sls-aws-api-gateway-crud-rest-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ"
            },
            "Export": {
              "Name": "sls-aws-api-gateway-crud-rest-api-dev-CreateLambdaFunctionQualifiedArn"
            }
          },
          "ReadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE"
            },
            "Export": {
              "Name": "sls-aws-api-gateway-crud-rest-api-dev-ReadLambdaFunctionQualifiedArn"
            }
          },
          "UpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE"
            },
            "Export": {
              "Name": "sls-aws-api-gateway-crud-rest-api-dev-UpdateLambdaFunctionQualifiedArn"
            }
          },
          "DeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU"
            },
            "Export": {
              "Name": "sls-aws-api-gateway-crud-rest-api-dev-DeleteLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-api-gateway-crud-rest-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "esbuild": {
        "bundle": true,
        "minify": true,
        "exclude": [
          "aws-sdk"
        ],
        "target": "node18",
        "define": {
          "require.resolve": "undefined"
        }
      }
    },
    "pluginsData": {},
    "functions": {
      "create": {
        "handler": "src/handlers/create.handler",
        "environment": {
          "ITEMS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"ITEMS_TABLE\"]"
          }
        },
        "events": [
          {
            "http": {
              "path": "items",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-api-gateway-crud-rest-api-dev-create",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateLambdaVersionf1F6TegWi292sjuVO41c3QoXJkcUsfHxwzrE4FH2NQ"
      },
      "read": {
        "handler": "src/handlers/read.handler",
        "environment": {
          "ITEMS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"ITEMS_TABLE\"]"
          }
        },
        "events": [
          {
            "http": {
              "path": "items/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-api-gateway-crud-rest-api-dev-read",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ReadLambdaVersiontvDmX8txRvA0d4W8t2y0AGRgatI9tZLjGrlYJZXE"
      },
      "update": {
        "handler": "src/handlers/update.handler",
        "environment": {
          "ITEMS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"ITEMS_TABLE\"]"
          }
        },
        "events": [
          {
            "http": {
              "path": "items/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-api-gateway-crud-rest-api-dev-update",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateLambdaVersionTcYwq2yLFlgW8pljmtdKZySYtzn0qtjSiahVp6rpIqE"
      },
      "delete": {
        "handler": "src/handlers/delete.handler",
        "environment": {
          "ITEMS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"ITEMS_TABLE\"]"
          }
        },
        "events": [
          {
            "http": {
              "path": "items/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-api-gateway-crud-rest-api-dev-delete",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteLambdaVersion5cQEw4BxxvaKWcjQNTkE80ROHD3E8bJZxazemOdxU"
      }
    },
    "resources": {
      "Resources": {
        "ItemsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ItemsTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "aindriu",
      "app": "aws-api-gateway-crud-rest-api",
      "service": "aws-api-gateway-crud-rest-api",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "package": {
        "exclude": [
          "tests/**",
          ".git/**"
        ],
        "artifactsS3KeyDirname": "serverless/aws-api-gateway-crud-rest-api/dev/code-artifacts",
        "deploymentBucket": "amge-deployment-bucket",
        "artifact": "/media/Feidhmchláir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api/.serverless/aws-api-gateway-crud-rest-api.zip",
        "artifactDirectoryName": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "app": "aws-api-gateway-crud-rest-api",
    "appId": null,
    "org": "aindriu",
    "orgId": null,
    "layers": {},
    "artifact": "/media/Feidhmchláir/Tionscadail/AMGE/aws-api-gateway-crud-rest-api/.serverless/aws-api-gateway-crud-rest-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-api-gateway-crud-rest-api/dev/1731270346601-2024-11-10T20:25:46.601Z",
    "artifact": "aws-api-gateway-crud-rest-api.zip"
  }
}